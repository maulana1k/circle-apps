{"version":3,"file":"main.js","mappings":"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","sources":["webpack://circle-app/./apps/api/src/app/Server.ts","webpack://circle-app/./apps/api/src/app/controller/AuthController.ts","webpack://circle-app/./apps/api/src/app/controller/BaseController.ts","webpack://circle-app/./apps/api/src/app/controller/TweetController.ts","webpack://circle-app/./apps/api/src/app/controller/UsersController.ts","webpack://circle-app/./apps/api/src/app/middlewares/auth.middleware.ts","webpack://circle-app/./apps/api/src/app/models/Relation.ts","webpack://circle-app/./apps/api/src/app/models/Tweet.ts","webpack://circle-app/./apps/api/src/app/models/User.ts","webpack://circle-app/./apps/api/src/app/utils/responses.ts","webpack://circle-app/external commonjs \"bcrypt\"","webpack://circle-app/external commonjs \"body-parser\"","webpack://circle-app/external commonjs \"cors\"","webpack://circle-app/external commonjs \"dotenv\"","webpack://circle-app/external commonjs \"express\"","webpack://circle-app/external commonjs \"express-validator\"","webpack://circle-app/external commonjs \"jsonwebtoken\"","webpack://circle-app/external commonjs \"mongoose\"","webpack://circle-app/external commonjs \"morgan\"","webpack://circle-app/external commonjs \"tslib\"","webpack://circle-app/external node-commonjs \"path\"","webpack://circle-app/webpack/bootstrap","webpack://circle-app/./apps/api/src/index.ts"],"sourcesContent":["import { Application, RequestHandler } from 'express';\r\nimport mongoose from 'mongoose';\r\nimport BaseController from './controller/BaseController';\r\n\r\nclass Server {\r\n  private port: number | string;\r\n  public app: Application;\r\n  private dbUri: string;\r\n  private clientPath : string;\r\n  private apiPrefix: string = '/api';\r\n  constructor(port: number | string, app: Application) {\r\n    this.port = port;\r\n    this.app = app;\r\n  }\r\n  public setDatabaseUri(uri: string) {\r\n    this.dbUri = uri;\r\n  }\r\n  public setClientPath(path: string) {\r\n    this.clientPath = path;\r\n  }\r\n  async run() {\r\n    try {\r\n      await mongoose\r\n        .connect(this.dbUri)\r\n        .then(() => console.log('__________ DB connected ________'));\r\n      return this.app.listen(this.port, () =>\r\n        console.log('⚡ Server running on port', this.port)\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      process.exit(1);\r\n    }\r\n  }\r\n  public loadGlobalMiddleware(middlewares: RequestHandler[]): void {\r\n    middlewares.forEach((middleware) => {\r\n      this.app.use(middleware);\r\n    });\r\n  }\r\n  public loadController(controllers: Array<BaseController>): void {\r\n    controllers.forEach((controller) => {\r\n      controller.connectRouter(this.app, this.apiPrefix);\r\n    });\r\n    /**\r\n     * Serve frontend build app\r\n     */\r\n    if(this.clientPath) {\r\n      this.app.get('*', (req, res) => {\r\n        res.sendFile(this.clientPath);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Server;\r\n","import { Request, Response } from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport BaseController from './BaseController';\r\nimport User from '../models/User';\r\nimport { IUser } from '@circle-app/api-interfaces';\r\nimport { body } from 'express-validator';\r\nimport Relation from '../models/Relation';\r\n\r\nclass AuthController extends BaseController {\r\n  constructor() {\r\n    super();\r\n    this.basePath = '/auth';\r\n    /**\r\n     * local middleware\r\n     */\r\n    /**\r\n     * Route handler mapping\r\n     */\r\n    this.router.post('/signin', this.signin);\r\n    this.router.post(\r\n      '/signup',\r\n      [\r\n        body('email').isEmail().normalizeEmail(),\r\n        body('password').isLength({ min: 6 }),\r\n      ],\r\n      this.signup\r\n    );\r\n    this.router.put('/update-profile', this.updateProfile);\r\n  }\r\n  private async signin(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { username, email, password } = req.body;\r\n      console.log(req.body);\r\n\r\n      const user = await User.findOne({ $or: [{ username }, { email }] });\r\n      //check if user is not exist\r\n      if (!user) {\r\n        res.status(400).send('Account is not registered');\r\n        return;\r\n      }\r\n      // compare password\r\n      const match = await bcrypt.compare(password, user.password);\r\n      if (!match) {\r\n        res.status(400).send('Password wrong');\r\n        return;\r\n      }\r\n      // const userRelation = await Relation.findOne({ user: user.username });\r\n      // generate token\r\n      const secretKey = process.env.NX_JWT_KEY;\r\n      const token = jwt.sign({ email }, secretKey);\r\n      res.status(200).json(Object.assign(user.toJSON(), { token }));\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async signup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { username, email, password, birth } = req.body;\r\n      //check if username is unique\r\n      const isUnique = await User.findOne({ username });\r\n      if (isUnique) {\r\n        res.status(400).send('Username is already used');\r\n        return;\r\n      }\r\n      //check if user is exist\r\n      const isExist = await User.findOne({ email });\r\n      if (isExist) {\r\n        res.status(400).send('Email is already used');\r\n        return;\r\n      }\r\n      // hash current password\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n      // create and store user to db\r\n      const user = new User({\r\n        username,\r\n        displayName: username,\r\n        birth,\r\n        email,\r\n        password: hashedPassword,\r\n      });\r\n      const savedUser = await user.save();\r\n      /**\r\n       * Create relation document reference\r\n       */\r\n      await new Relation({\r\n        user: savedUser.username,\r\n      }).save();\r\n\r\n      const secretKey = process.env.NX_JWT_KEY;\r\n      const token = jwt.sign({ username }, secretKey);\r\n\r\n      res.status(200).json(Object.assign(savedUser.toJSON(), { token }));\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async updateProfile(req: Request, res: Response) {\r\n    try {\r\n      const { _id, displayName, bio, avatar }: IUser = req.body;\r\n      console.log(req.body);\r\n\r\n      const user = await User.findByIdAndUpdate(\r\n        _id,\r\n        {\r\n          $set: {\r\n            bio,\r\n            displayName,\r\n            avatar,\r\n          },\r\n        },\r\n        { new: true }\r\n      );\r\n      res.status(200).json(user);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async forgotPassword(req, res) {}\r\n  private async sendOTP(req, res) {}\r\n}\r\nexport default AuthController;\r\n","import { Application, NextFunction, Request, Response, Router } from 'express';\r\n\r\nexport type Methods = 'get' | 'post' | 'put' | 'delete';\r\n\r\nexport interface Middleware {\r\n  req: Request;\r\n  res: Response;\r\n  next: NextFunction;\r\n}\r\n\r\nexport interface Route {\r\n  path: string;\r\n  method: string;\r\n  handler: (req: Request, res: Response) => any | Promise<any>;\r\n  middleware: Array<Middleware>;\r\n}\r\n\r\nexport interface Controller {\r\n  router: Router;\r\n  basePath: string;\r\n  routes: Array<Route>;\r\n  setRoutes: () => void;\r\n}\r\n\r\nabstract class BaseController {\r\n  protected router: Router = Router();\r\n  protected basePath: string;\r\n  protected routes: Array<Route>;\r\n  public connectRouter(app: Application, prefix: string) {\r\n    app.use(prefix + this.basePath, this.router);\r\n  }\r\n}\r\n\r\nexport default BaseController;\r\n","import { Request, Response } from 'express';\r\nimport { query, validationResult } from 'express-validator';\r\n\r\nimport authMiddleware from '../middlewares/auth.middleware';\r\nimport Tweet from '../models/Tweet';\r\nimport { response_bad_request, response_success } from '../utils/responses';\r\nimport BaseController from './BaseController';\r\n\r\nexport default class TweetController extends BaseController {\r\n  constructor() {\r\n    super();\r\n    this.basePath = '/tweet';\r\n    /**\r\n     * Local middleware\r\n     */\r\n    // this.router.use(authMiddleware);\r\n    /**\r\n     * Routes mapping\r\n     */\r\n    this.router.get(\r\n      '/',\r\n      [query('size').toInt(), query('offset').toInt()],\r\n      this.index\r\n    );\r\n    this.router.post('/new', this.post);\r\n    this.router.get('/users/:userId', this.getUserTweets);\r\n    this.router.get('/:tweetId', this.details);\r\n    this.router.get('/:tweetId/replies', this.showReplies);\r\n    this.router.post('/:tweetId/like/:userId', this.like);\r\n    this.router.post('/:tweetId/unlike/:userId', this.unlike);\r\n    this.router.get('/:tweetId/likes', this.showLikes);\r\n    this.router.post('/:tweetId/reply', this.reply);\r\n    this.router.delete('/:tweetId', this.delete);\r\n  }\r\n  private async index(req: Request, res: Response) {\r\n    try {\r\n      const { size, offset }: any = req.query;\r\n      const tweets = await Tweet.find({ replyTo: null })\r\n        .populate('author', { displayName: 1, username: 1, avatar: 1 })\r\n        .sort({ timestamp: -1 })\r\n        .skip(offset * size)\r\n        .limit(size);\r\n      return res.status(200).json(tweets);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async post(req: Request, res: Response) {\r\n    try {\r\n      const err = validationResult(req);\r\n      if (!err.isEmpty()) return response_bad_request(res, err);\r\n      const { author, content, image } = req.body;\r\n      const tweet = new Tweet({\r\n        author,\r\n        content,\r\n        image,\r\n        timestamp: Date.now(),\r\n      });\r\n      const saved = await tweet.save();\r\n      return response_success(res, saved);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async details(req: Request, res: Response) {\r\n    try {\r\n      const { tweetId } = req.params;\r\n      const tweet = await Tweet.findById(tweetId).populate('author', {\r\n        displayName: 1,\r\n        username: 1,\r\n        avatar: 1,\r\n      });\r\n      return res.status(200).json(tweet);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async like(req: Request, res: Response) {\r\n    try {\r\n      const { userId, tweetId }: any = req.params;\r\n      // add user id to likes\r\n      const liked = await Tweet.findByIdAndUpdate(\r\n        tweetId,\r\n        {\r\n          $push: { likes: userId },\r\n        },\r\n        {\r\n          new: true,\r\n        }\r\n      );\r\n      if (!liked) {\r\n        return res.status(400).json('Like tweet failed');\r\n      }\r\n      res.status(200).json('Like tweet success');\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async unlike(req: Request, res: Response) {\r\n    try {\r\n      const { tweetId, userId } = req.params;\r\n      const liked = await Tweet.findByIdAndUpdate(\r\n        tweetId,\r\n        {\r\n          $pull: { likes: userId },\r\n        },\r\n        {\r\n          new: true,\r\n        }\r\n      );\r\n      res.status(200).json('Unlike tweet success');\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async reply(req: Request, res: Response) {\r\n    try {\r\n      const { userId, content } = req.body;\r\n      const { tweetId }: any = req.params;\r\n      // upload attachment/blob to file storage\r\n\r\n      // post replies tweet first\r\n      const newReplies = new Tweet({\r\n        author: userId,\r\n        content,\r\n        replyTo: tweetId,\r\n        timestamp: Date.now(),\r\n      });\r\n      const replies = await newReplies.save();\r\n      res.status(200).json(replies);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async delete(req: Request, res: Response) {\r\n    try {\r\n      const { tweetId } = req.params;\r\n      const deleted = await Tweet.deleteOne({ _id: tweetId });\r\n      res.status(200).json(deleted);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async showReplies(req: Request, res: Response) {\r\n    try {\r\n      const { tweetId }: any = req.params;\r\n      // populate all replies tweet\r\n      const tweet = await Tweet.find({ replyTo: tweetId }).populate('author', {\r\n        displayName: 1,\r\n        avatar: 1,\r\n        username: 1,\r\n      });\r\n      res.status(200).json(tweet);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async getUserTweets(req: Request, res: Response) {\r\n    try {\r\n      const { userId } = req.params;\r\n      const tweets = await Tweet.find({\r\n        author: userId,\r\n        replyTo: null,\r\n      }).populate('author', {\r\n        displayName: 1,\r\n        username: 1,\r\n        avatar: 1,\r\n      }).sort({ timestamp: -1 });\r\n      res.status(200).json(tweets);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async showLikes(req: Request, res: Response) {\r\n    try {\r\n      const { tweetId }: any = req.params;\r\n      const tweet = await Tweet.findById(tweetId)\r\n        .populate('likes')\r\n        .select({ likes: 1, _id: 0 });\r\n      return response_success(res, tweet);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n}\r\n","import { Request, Response } from 'express';\r\nimport authMiddleware from '../middlewares/auth.middleware';\r\nimport Relation from '../models/Relation';\r\nimport Tweet from '../models/Tweet';\r\nimport User from '../models/User';\r\nimport BaseController from './BaseController';\r\n\r\nexport default class UsersController extends BaseController {\r\n  constructor() {\r\n    super();\r\n    this.basePath = '/users';\r\n    /**\r\n     * Local middleware\r\n     */\r\n    this.router.use(authMiddleware);\r\n\r\n    /**\r\n     * Route handler mapping\r\n     */\r\n    this.router.get('/:username', this.getProfile);\r\n    this.router.get('/:username/tweets', this.getTweetsByUser);\r\n    this.router.get('/:username/relations', this.getUserRelations);\r\n    this.router.get('/search/:query', this.userSearch);\r\n    this.router.post('/:username/follows', this.userFollows);\r\n    this.router.post('/:username/unfollow', this.userUnfollows);\r\n  }\r\n  private async getProfile(req: Request, res: Response) {\r\n    try {\r\n      const { username } = req.params;\r\n      const user = await User.findOne({ username }, { password: 0 }).lean();\r\n      const relation = await Relation.findOne({ user: username }).lean();\r\n      res\r\n        .status(200)\r\n        .json(Object.assign(user, relation.followers, relation.followings));\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async getTweetsByUser(req: Request, res: Response) {\r\n    try {\r\n      const { username } = req.params;\r\n      const tweets = await Tweet.find({ author: username }).lean();\r\n      res.status(200).json(tweets);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async getUserRelations(req: Request, res: Response) {\r\n    try {\r\n      const { username } = req.params;\r\n      const followers = await Relation.findOne(\r\n        { user: username },\r\n        { followers: 1, followings: 1 }\r\n      ).populate('followers followings');\r\n      res.status(200).json(followers);\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n\r\n  private async userFollows(req: Request, res: Response) {\r\n    try {\r\n      const { username } = req.params;\r\n      const { userId, followerUsername } = req.body;\r\n      const alreadyFollows = await Relation.findOne({\r\n        user: username,\r\n        followers: userId,\r\n      });\r\n      console.log('already follow', alreadyFollows);\r\n      if (alreadyFollows) {\r\n        return res.status(400).json('User already follows this account');\r\n      }\r\n      await Relation.findOneAndUpdate(\r\n        { user: username },\r\n        {\r\n          $push: {\r\n            followers: userId,\r\n          },\r\n        }\r\n      );\r\n      const targetId = await User.findOne({ username }, { _id: 1 });\r\n      await Relation.findOneAndUpdate(\r\n        { user: followerUsername },\r\n        {\r\n          $push: {\r\n            followings: targetId._id,\r\n          },\r\n        }\r\n      );\r\n      return res.status(200).json('Follow success');\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async userUnfollows(req: Request, res: Response) {\r\n    try {\r\n      const { username } = req.params;\r\n      const { userId, followerUsername } = req.body;\r\n      const alreadyFollows = await Relation.findOne({\r\n        user: username,\r\n        followers: userId,\r\n      });\r\n      console.log('already follow', alreadyFollows);\r\n      if (!alreadyFollows) {\r\n        return res.status(400).json('User not follows this account');\r\n      }\r\n      await Relation.findOneAndUpdate(\r\n        { user: username },\r\n        {\r\n          $pull: {\r\n            followers: userId,\r\n          },\r\n        },\r\n        { new: true }\r\n      );\r\n      const targetId = await User.findOne({ username }, { _id: 1 });\r\n      await Relation.findOneAndUpdate(\r\n        { user: followerUsername },\r\n        {\r\n          $pull: {\r\n            followings: targetId._id,\r\n          },\r\n        },\r\n        { new: true }\r\n      );\r\n      return res.status(200).json('Unfollow success');\r\n    } catch (error) {\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n  private async userSearch(req: Request, res: Response) {\r\n    try {\r\n      // if (!req.params) {\r\n      //   return res.status(400).json('User query is empty');\r\n      // }\r\n      const { query: userQuery } = req.params;\r\n      const userList = await User.find({\r\n        $or: [\r\n          { displayName: { $regex: new RegExp(userQuery, 'i') } },\r\n          { username: { $regex: new RegExp(userQuery, 'i') } },\r\n        ],\r\n      });\r\n      return res.status(200).json(userList);\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      res.status(500).json(error);\r\n    }\r\n  }\r\n}\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport default function authMiddleware(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  const { authorization } = req.headers;\r\n  const hasToken = authorization && authorization.split(' ')[0] == 'Bearer';\r\n  if (!hasToken) {\r\n    return res.status(403).json('Authorization token required');\r\n  }\r\n  jwt.verify(\r\n    authorization.split(' ')[1],\r\n    process.env['NX_JWT_KEY'],\r\n    { complete: true },\r\n    (err, decoded) => {\r\n      if (err) return res.status(401).json('Authorization token invalid');\r\n      req.body['user'] = decoded;\r\n      next();\r\n    }\r\n  );\r\n}\r\n","import { IRelation } from '@circle-app/api-interfaces';\r\nimport { model, Schema, Types } from 'mongoose';\r\n\r\nconst RelationSchema = new Schema<IRelation>({\r\n  user: { type: String },\r\n  followers: [{ type: String, ref: 'User' }],\r\n  followings: [{ type: String, ref: 'User' }],\r\n});\r\n\r\nconst Relation = model<IRelation>('Relations', RelationSchema);\r\n\r\nexport default Relation;\r\n","import { ITweet } from '@circle-app/api-interfaces';\r\nimport { model, Schema, Types } from 'mongoose';\r\n\r\nconst TweetSchema = new Schema<ITweet>({\r\n  author: { type: String, ref: 'User' },\r\n  content: { type: String, default: '' },\r\n  image: { type: String, default: '' },\r\n  retweet: { type: Types.ObjectId, ref: 'Tweet' },\r\n  likes: [{ type: Types.ObjectId, ref: 'User' }],\r\n  replyTo: { type: Types.ObjectId, ref: 'Tweet' },\r\n  timestamp: { type: Date },\r\n});\r\nconst Tweet = model<ITweet>('Tweet', TweetSchema);\r\n\r\nexport default Tweet;\r\n","import { Schema, model } from 'mongoose';\r\nimport { IUser } from '@circle-app/api-interfaces';\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  displayName: { type: String, required: true },\r\n  username: { type: String, required: true, unique: true },\r\n  email: { type: String, required: true, unique: true, select: true },\r\n  password: { type: String, required: true },\r\n  avatar: { type: String, default: 'default' },\r\n  birth: { type: Date },\r\n  coverImages: { type: String, default: 'default' },\r\n  bio: { type: String, default: '' },\r\n  verified: { type: Boolean, default: false, select: true },\r\n});\r\n\r\nconst User = model<IUser>('User', UserSchema);\r\n\r\nexport default User;\r\n","import { Response } from 'express';\r\nimport { ResponseApi } from '@circle-app/api-interfaces';\r\n\r\n// const response_handler = (\r\n//   res: Response,\r\n//   { statusCode, error, message, data }: ResponseType\r\n// ): void => {\r\n//   res.status(statusCode).json({ message, error, data });\r\n// };\r\n\r\nexport function response_success<T>(\r\n  res: Response,\r\n  data: T,\r\n  message: string = 'Success'\r\n) {\r\n  const payload: ResponseApi<T> = { message, err: null, data };\r\n  res.status(200).json(payload);\r\n}\r\n\r\nexport function response_not_found(\r\n  res: Response,\r\n  message: string,\r\n  err: any = 'Not found'\r\n) {\r\n  const payload: ResponseApi<null> = { message, err, data: null };\r\n  res.status(404).json(payload);\r\n}\r\nexport function response_bad_request(\r\n  res: Response,\r\n  message: any,\r\n  err: any = 'Bad request'\r\n) {\r\n  const payload: ResponseApi<null> = { message, err, data: null };\r\n  res.status(400).json(payload);\r\n}\r\n\r\nexport function response_forbidden(\r\n  res: Response,\r\n  message: string,\r\n  err: any = 'Access forbidden'\r\n) {\r\n  const payload: ResponseApi<null> = { message, err, data: null };\r\n  res.status(403).json(payload);\r\n}\r\n\r\nexport function response_server_error(\r\n  res: Response,\r\n  message: string,\r\n  err: any = 'Internal server error'\r\n) {\r\n  const payload: ResponseApi<null> = { message, err, data: null };\r\n  res.status(500).json(payload);\r\n}\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-validator\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"tslib\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\n// import functions from 'firebase-functions';\n\nimport Server from './app/Server';\nimport AuthController from './app/controller/AuthController';\nimport path from 'path';\nimport TweetController from './app/controller/TweetController';\nimport bodyParser from 'body-parser';\nimport UsersController from './app/controller/UsersController';\nimport * as dotenv from 'dotenv'\n/**\n * Call dotenv to load environtment variable from .env file\n */\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 8080;\nconst dbURI = process.env.NX_DB_URI;\nconst server = new Server(port, app);\nconst CLIENT_PATH = path.join(__dirname, '/dist/apps/react');\nconst ASSETS_PATH = path.join(__dirname, '/assets');\n/**\n * CORS configuration\n */\nconst corsOptions = {\n  origin: '*',\n  method: ['GET', 'POST', 'DELETE', 'UPDATE', 'PUT'],\n};\n/**\n * set mongodb uri\n */\nserver.setDatabaseUri(dbURI);\n/**\n * Set frontend build path to index.html (if any)\n */\nserver.setClientPath(path.join(CLIENT_PATH, 'index.html'));\n/**\n * always load global middlewares before load any controllers\n */\nserver.loadGlobalMiddleware([\n  cors(corsOptions),\n  // helmet(),\n  morgan('dev'),\n  bodyParser.urlencoded({ extended: true }),\n  express.static(ASSETS_PATH),\n  express.static(CLIENT_PATH),\n  express.json(),\n]);\n/**\n * load all controllers instance\n */\nserver.loadController([\n  new AuthController(),\n  new TweetController(),\n  new UsersController(),\n]);\n/**\n *  ⚡⚡⚡ RUN THE SERVER ⚡⚡⚡\n */\nserver.run();\n/**\n * export app for testing usage\n */\n// exports.app = functions.https.onRequest(server.app);\n// export default server.app;\n"],"names":[],"sourceRoot":""}